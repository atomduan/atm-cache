atm_feature="poll()"
atm_feature_name=
atm_feature_run=no
atm_feature_incs="#include <poll.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int  n; struct pollfd  pl;
                  pl.fd = 0;
                  pl.events = 0;
                  pl.revents = 0;
                  n = poll(&pl, 1, 0);
                  if (n == -1) return 1"
. auto/feature

if [ $atm_found = no ]; then
    EVENT_POLL=NONE
fi

#--------------------------------------------

atm_feature="/dev/poll"
atm_feature_name="ATM_HAVE_DEVPOLL"
atm_feature_run=no
atm_feature_incs="#include <sys/devpoll.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int  n, dp; struct dvpoll  dvp;
                  dp = 0;
                  dvp.dp_fds = NULL;
                  dvp.dp_nfds = 0;
                  dvp.dp_timeout = 0;
                  n = ioctl(dp, DP_POLL, &dvp);
                  if (n == -1) return 1"
. auto/feature

if [ $atm_found = yes ]; then
    CORE_SRCS="$CORE_SRCS $DEVPOLL_SRCS"
    EVENT_MODULES="$EVENT_MODULES $DEVPOLL_MODULE"
    EVENT_FOUND=YES
fi

#--------------------------------------------

if test -z "$ATM_KQUEUE_CHECKED"; then
    atm_feature="kqueue"
    atm_feature_name="ATM_HAVE_KQUEUE"
    atm_feature_run=no
    atm_feature_incs="#include <sys/event.h>"
    atm_feature_path=
    atm_feature_libs=
    atm_feature_test="(void) kqueue()"
    . auto/feature

    if [ $atm_found = yes ]; then

        have=ATM_HAVE_CLEAR_EVENT . auto/have
        EVENT_MODULES="$EVENT_MODULES $KQUEUE_MODULE"
        CORE_SRCS="$CORE_SRCS $KQUEUE_SRCS"
        EVENT_FOUND=YES

        atm_feature="kqueue's NOTE_LOWAT"
        atm_feature_name="ATM_HAVE_LOWAT_EVENT"
        atm_feature_run=no
        atm_feature_incs="#include <sys/event.h>"
        atm_feature_path=
        atm_feature_libs=
        atm_feature_test="struct kevent  kev;
                          kev.fflags = NOTE_LOWAT;
                          (void) kev"
        . auto/feature


        atm_feature="kqueue's EVFILT_TIMER"
        atm_feature_name="ATM_HAVE_TIMER_EVENT"
        atm_feature_run=yes
        atm_feature_incs="#include <sys/event.h>
                          #include <sys/time.h>"
        atm_feature_path=
        atm_feature_libs=
        atm_feature_test="int      kq;
                  struct kevent    kev;
                  struct timespec  ts;

                  if ((kq = kqueue()) == -1) return 1;

                  kev.ident = 0;
                  kev.filter = EVFILT_TIMER;
                  kev.flags = EV_ADD|EV_ENABLE;
                  kev.fflags = 0;
                  kev.data = 1000;
                  kev.udata = 0;

                  ts.tv_sec = 0;
                  ts.tv_nsec = 0;

                  if (kevent(kq, &kev, 1, &kev, 1, &ts) == -1) return 1;

                  if (kev.flags & EV_ERROR) return 1;"

        . auto/feature
    fi
fi


if [ "$ATM_SYSTEM" = "NetBSD" ]; then

    # NetBSD 2.0 incompatibly defines kevent.udata as "intptr_t"

    cat << END >> $ATM_AUTO_CONFIG_H

#define ATM_KQUEUE_UDATA_T

END

else
    cat << END >> $ATM_AUTO_CONFIG_H

#define ATM_KQUEUE_UDATA_T  (void *)

END

fi

#--------------------------------------------

atm_feature="crypt()"
atm_feature_name=
atm_feature_run=no
atm_feature_incs=
atm_feature_path=
atm_feature_libs=
atm_feature_test="crypt(\"test\", \"salt\");"
. auto/feature


if [ $atm_found = no ]; then

    atm_feature="crypt() in libcrypt"
    atm_feature_name=
    atm_feature_run=no
    atm_feature_incs=
    atm_feature_path=
    atm_feature_libs=-lcrypt
    . auto/feature

    if [ $atm_found = yes ]; then
        CRYPT_LIB="-lcrypt"
    fi
fi

#--------------------------------------------

atm_feature="F_READAHEAD"
atm_feature_name="ATM_HAVE_F_READAHEAD"
atm_feature_run=no
atm_feature_incs="#include <fcntl.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="fcntl(0, F_READAHEAD, 1);"
. auto/feature

#--------------------------------------------

atm_feature="posix_fadvise()"
atm_feature_name="ATM_HAVE_POSIX_FADVISE"
atm_feature_run=no
atm_feature_incs="#include <fcntl.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL);"
. auto/feature

#--------------------------------------------

atm_feature="O_DIRECT"
atm_feature_name="ATM_HAVE_O_DIRECT"
atm_feature_run=no
atm_feature_incs="#include <fcntl.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="fcntl(0, F_SETFL, O_DIRECT);"
. auto/feature


if [ $atm_found = yes -a "$ATM_SYSTEM" = "Linux" ]; then
    have=ATM_HAVE_ALIGNED_DIRECTIO . auto/have
fi

atm_feature="F_NOCACHE"
atm_feature_name="ATM_HAVE_F_NOCACHE"
atm_feature_run=no
atm_feature_incs="#include <fcntl.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="fcntl(0, F_NOCACHE, 1);"
. auto/feature

#--------------------------------------------

atm_feature="directio()"
atm_feature_name="ATM_HAVE_DIRECTIO"
atm_feature_run=no
atm_feature_incs="#include <sys/types.h>
                  #include <sys/fcntl.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="directio(0, DIRECTIO_ON);"
. auto/feature

#--------------------------------------------

atm_feature="statfs()"
atm_feature_name="ATM_HAVE_STATFS"
atm_feature_run=no
atm_feature_incs="$ATM_INCLUDE_SYS_PARAM_H
                  $ATM_INCLUDE_SYS_MOUNT_H
                  $ATM_INCLUDE_SYS_VFS_H"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct statfs  fs;
                  statfs(\".\", &fs);"
. auto/feature

#--------------------------------------------

atm_feature="statvfs()"
atm_feature_name="ATM_HAVE_STATVFS"
atm_feature_run=no
atm_feature_incs="#include <sys/types.h>
                  #include <sys/statvfs.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct statvfs  fs;
                  statvfs(\".\", &fs);"
. auto/feature

#--------------------------------------------

atm_feature="dlopen()"
atm_feature_name="ATM_HAVE_DLOPEN"
atm_feature_run=no
atm_feature_incs="#include <dlfcn.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="dlopen(NULL, RTLD_NOW | RTLD_GLOBAL); dlsym(NULL, \"\")"
. auto/feature


if [ $atm_found = no ]; then

    atm_feature="dlopen() in libdl"
    atm_feature_libs="-ldl"
    . auto/feature

    if [ $atm_found = yes ]; then
        CORE_LIBS="$CORE_LIBS -ldl"
        ATM_LIBDL="-ldl"
    fi
fi

#--------------------------------------------

atm_feature="sched_yield()"
atm_feature_name="ATM_HAVE_SCHED_YIELD"
atm_feature_run=no
atm_feature_incs="#include <sched.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="sched_yield()"
. auto/feature


if [ $atm_found = no ]; then

    atm_feature="sched_yield() in librt"
    atm_feature_libs="-lrt"
    . auto/feature

    if [ $atm_found = yes ]; then
        CORE_LIBS="$CORE_LIBS -lrt"
    fi
fi

#--------------------------------------------

atm_feature="SO_SETFIB"
atm_feature_name="ATM_HAVE_SETFIB"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, SOL_SOCKET, SO_SETFIB, NULL, 0)"
. auto/feature

#--------------------------------------------

atm_feature="SO_REUSEPORT"
atm_feature_name="ATM_HAVE_REUSEPORT"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, SOL_SOCKET, SO_REUSEPORT, NULL, 0)"
. auto/feature

#--------------------------------------------

atm_feature="SO_ACCEPTFILTER"
atm_feature_name="ATM_HAVE_DEFERRED_ACCEPT"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, SOL_SOCKET, SO_ACCEPTFILTER, NULL, 0)"
. auto/feature

#--------------------------------------------

# NetBSD bind to any address for transparent proxying

atm_feature="SO_BINDANY"
atm_feature_name="ATM_HAVE_TRANSPARENT_PROXY"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, SOL_SOCKET, SO_BINDANY, NULL, 0)"
. auto/feature

#--------------------------------------------

# Linux IP_BIND_ADDRESS_NO_PORT

atm_feature="IP_BIND_ADDRESS_NO_PORT"
atm_feature_name="ATM_HAVE_IP_BIND_ADDRESS_NO_PORT"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_IP, IP_BIND_ADDRESS_NO_PORT, NULL, 0)"
. auto/feature

#--------------------------------------------

# Linux transparent proxying

atm_feature="IP_TRANSPARENT"
atm_feature_name="ATM_HAVE_TRANSPARENT_PROXY"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_IP, IP_TRANSPARENT, NULL, 0)"
. auto/feature

#--------------------------------------------

# FreeBSD bind to any address for transparent proxying

atm_feature="IP_BINDANY"
atm_feature_name="ATM_HAVE_TRANSPARENT_PROXY"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_IP, IP_BINDANY, NULL, 0)"
. auto/feature

#--------------------------------------------

# BSD way to get IPv4 datagram destination address

atm_feature="IP_RECVDSTADDR"
atm_feature_name="ATM_HAVE_IP_RECVDSTADDR"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_IP, IP_RECVDSTADDR, NULL, 0)"
. auto/feature

#--------------------------------------------

# Linux way to get IPv4 datagram destination address

atm_feature="IP_PKTINFO"
atm_feature_name="ATM_HAVE_IP_PKTINFO"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_IP, IP_PKTINFO, NULL, 0)"
. auto/feature

#--------------------------------------------

# RFC 3542 way to get IPv6 datagram destination address

atm_feature="IPV6_RECVPKTINFO"
atm_feature_name="ATM_HAVE_IPV6_RECVPKTINFO"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_IPV6, IPV6_RECVPKTINFO, NULL, 0)"
. auto/feature

#--------------------------------------------

atm_feature="TCP_DEFER_ACCEPT"
atm_feature_name="ATM_HAVE_DEFERRED_ACCEPT"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <netinet/tcp.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_TCP, TCP_DEFER_ACCEPT, NULL, 0)"
. auto/feature

#--------------------------------------------

atm_feature="TCP_KEEPIDLE"
atm_feature_name="ATM_HAVE_KEEPALIVE_TUNABLE"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <netinet/tcp.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_TCP, TCP_KEEPIDLE, NULL, 0);
                  setsockopt(0, IPPROTO_TCP, TCP_KEEPINTVL, NULL, 0);
                  setsockopt(0, IPPROTO_TCP, TCP_KEEPCNT, NULL, 0)"
. auto/feature

#--------------------------------------------

atm_feature="TCP_FASTOPEN"
atm_feature_name="ATM_HAVE_TCP_FASTOPEN"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <netinet/tcp.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="setsockopt(0, IPPROTO_TCP, TCP_FASTOPEN, NULL, 0)"
. auto/feature

#--------------------------------------------

atm_feature="TCP_INFO"
atm_feature_name="ATM_HAVE_TCP_INFO"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <netinet/tcp.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="socklen_t optlen = sizeof(struct tcp_info);
                  struct tcp_info ti;
                  ti.tcpi_rtt = 0;
                  ti.tcpi_rttvar = 0;
                  ti.tcpi_snd_cwnd = 0;
                  ti.tcpi_rcv_space = 0;
                  getsockopt(0, IPPROTO_TCP, TCP_INFO, &ti, &optlen)"
. auto/feature

#--------------------------------------------

atm_feature="accept4()"
atm_feature_name="ATM_HAVE_ACCEPT4"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="accept4(0, NULL, NULL, SOCK_NONBLOCK)"
. auto/feature

if [ $ATM_FILE_AIO = YES ]; then

    atm_feature="kqueue AIO support"
    atm_feature_name="ATM_HAVE_FILE_AIO"
    atm_feature_run=no
    atm_feature_incs="#include <aio.h>"
    atm_feature_path=
    atm_feature_libs=
    atm_feature_test="struct aiocb  iocb;
                      iocb.aio_sigevent.sigev_notify = SIGEV_KEVENT;
                      (void) aio_read(&iocb)"
    . auto/feature

    if [ $atm_found = yes ]; then
        CORE_SRCS="$CORE_SRCS $FILE_AIO_SRCS"
    fi

    if [ $atm_found = no ]; then

        atm_feature="Linux AIO support"
        atm_feature_name="ATM_HAVE_FILE_AIO"
        atm_feature_run=no
        atm_feature_incs="#include <linux/aio_abi.h>
                          #include <sys/eventfd.h>"
        atm_feature_path=
        atm_feature_libs=
        atm_feature_test="struct iocb  iocb;
                          iocb.aio_lio_opcode = IOCB_CMD_PREAD;
                          iocb.aio_flags = IOCB_FLAG_RESFD;
                          iocb.aio_resfd = -1;
                          (void) iocb;
                          (void) eventfd(0, 0)"
        . auto/feature

        if [ $atm_found = yes ]; then
            have=ATM_HAVE_EVENTFD . auto/have
            have=ATM_HAVE_SYS_EVENTFD_H . auto/have
            CORE_SRCS="$CORE_SRCS $LINUX_AIO_SRCS"
        fi
    fi

    if [ $atm_found = no ]; then

        atm_feature="Linux AIO support (SYS_eventfd)"
        atm_feature_incs="#include <linux/aio_abi.h>
                          #include <sys/syscall.h>"
        atm_feature_test="struct iocb  iocb;
                          iocb.aio_lio_opcode = IOCB_CMD_PREAD;
                          iocb.aio_flags = IOCB_FLAG_RESFD;
                          iocb.aio_resfd = -1;
                          (void) iocb;
                          (void) SYS_eventfd"
        . auto/feature

        if [ $atm_found = yes ]; then
            have=ATM_HAVE_EVENTFD . auto/have
            CORE_SRCS="$CORE_SRCS $LINUX_AIO_SRCS"
        fi
    fi

    if [ $atm_found = no ]; then
        cat << END

$0: no supported file AIO was found
Currently file AIO is supported on FreeBSD 4.3+ and Linux 2.6.22+ only

END
        exit 1
    fi

else

    atm_feature="eventfd()"
    atm_feature_name="ATM_HAVE_EVENTFD"
    atm_feature_run=no
    atm_feature_incs="#include <sys/eventfd.h>"
    atm_feature_path=
    atm_feature_libs=
    atm_feature_test="(void) eventfd(0, 0)"
    . auto/feature

    if [ $atm_found = yes ]; then
        have=ATM_HAVE_SYS_EVENTFD_H . auto/have
    fi

    if [ $atm_found = no ]; then

        atm_feature="eventfd() (SYS_eventfd)"
        atm_feature_incs="#include <sys/syscall.h>"
        atm_feature_test="(void) SYS_eventfd"
        . auto/feature
    fi
fi

#--------------------------------------------

have=ATM_HAVE_UNIX_DOMAIN . auto/have

#--------------------------------------------

atm_feature_libs=

# C types

atm_type="int"; . auto/types/sizeof

atm_type="long"; . auto/types/sizeof

atm_type="long long"; . auto/types/sizeof

atm_type="void *"; . auto/types/sizeof; atm_ptr_size=$atm_size
atm_param=ATM_PTR_SIZE; atm_value=$atm_size; . auto/types/value

# POSIX types

ATM_INCLUDE_AUTO_CONFIG_H="#include \"atm_auto_config.h\""

atm_type="uint32_t"; atm_types="u_int32_t"; . auto/types/typedef
atm_type="uint64_t"; atm_types="u_int64_t"; . auto/types/typedef
atm_type="sig_atomic_t"; atm_types="int"; . auto/types/typedef

. auto/types/sizeof

atm_param=ATM_SIG_ATOMIC_T_SIZE; atm_value=$atm_size; . auto/types/value

atm_type="socklen_t"; atm_types="int"; . auto/types/typedef
atm_type="in_addr_t"; atm_types="uint32_t u_int32_t"; . auto/types/typedef
atm_type="in_port_t"; atm_types="u_short"; . auto/types/typedef
atm_type="rlim_t"; atm_types="int"; . auto/types/typedef

. auto/types/uintptr_t

. auto/endianness

atm_type="size_t"; . auto/types/sizeof
atm_param=ATM_MAX_SIZE_T_VALUE; atm_value=$atm_max_value; . auto/types/value
atm_param=ATM_SIZE_T_LEN; atm_value=$atm_max_len; . auto/types/value

atm_type="off_t"; . auto/types/sizeof
atm_param=ATM_MAX_OFF_T_VALUE; atm_value=$atm_max_value; . auto/types/value
atm_param=ATM_OFF_T_LEN; atm_value=$atm_max_len; . auto/types/value

atm_type="time_t"; . auto/types/sizeof
atm_param=ATM_TIME_T_SIZE; atm_value=$atm_size; . auto/types/value
atm_param=ATM_TIME_T_LEN; atm_value=$atm_max_len; . auto/types/value
atm_param=ATM_MAX_TIME_T_VALUE; atm_value=$atm_max_value; . auto/types/value


#--------------------------------------------#
# syscalls, libc calls and some features     #
#--------------------------------------------#

atm_feature="AF_INET6"
atm_feature_name="ATM_HAVE_INET6"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <netinet/in.h>
                  #include <arpa/inet.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct sockaddr_in6  sin6;
                  sin6.sin6_family = AF_INET6;
                  (void) sin6"
. auto/feature

#--------------------------------------------

atm_feature="setproctitle()"
atm_feature_name="ATM_HAVE_SETPROCTITLE"
atm_feature_run=no
atm_feature_incs="#include <stdlib.h>"
atm_feature_path=
atm_feature_libs=$ATM_SETPROCTITLE_LIB
atm_feature_test="setproctitle(\"test\");"
. auto/feature

#--------------------------------------------

atm_feature="pread()"
atm_feature_name="ATM_HAVE_PREAD"
atm_feature_run=no
atm_feature_incs=
atm_feature_path=
atm_feature_libs=
atm_feature_test="char buf[1]; ssize_t n; n = pread(0, buf, 1, 0);
                  if (n == -1) return 1"
. auto/feature

#--------------------------------------------

atm_feature="pwrite()"
atm_feature_name="ATM_HAVE_PWRITE"
atm_feature_run=no
atm_feature_incs=
atm_feature_path=
atm_feature_libs=
atm_feature_test="char buf[1]; ssize_t n; n = pwrite(1, buf, 1, 0);
                  if (n == -1) return 1"
. auto/feature

#--------------------------------------------

# pwritev() was introduced in FreeBSD 6 and Linux 2.6.30, glibc 2.10

atm_feature="pwritev()"
atm_feature_name="ATM_HAVE_PWRITEV"
atm_feature_run=no
atm_feature_incs='#include <sys/uio.h>'
atm_feature_path=
atm_feature_libs=
atm_feature_test="char buf[1]; struct iovec vec[1]; ssize_t n;
                  vec[0].iov_base = buf;
                  vec[0].iov_len = 1;
                  n = pwritev(1, vec, 1, 0);
                  if (n == -1) return 1"
. auto/feature

#--------------------------------------------

atm_feature="sys_nerr"
atm_feature_name="ATM_SYS_NERR"
atm_feature_run=value
atm_feature_incs='#include <errno.h>
                  #include <stdio.h>'
atm_feature_path=
atm_feature_libs=
atm_feature_test='printf("%d", sys_nerr);'
. auto/feature

if [ $atm_found = no ]; then

    # Cygiwn defines _sys_nerr
    atm_feature="_sys_nerr"
    atm_feature_name="ATM_SYS_NERR"
    atm_feature_run=value
    atm_feature_incs='#include <errno.h>
                      #include <stdio.h>'
    atm_feature_path=
    atm_feature_libs=
    atm_feature_test='printf("%d", _sys_nerr);'
    . auto/feature
fi

if [ $atm_found = no ]; then

    # Solaris has no sys_nerr
    atm_feature='maximum errno'
    atm_feature_name=ATM_SYS_NERR
    atm_feature_run=value
    atm_feature_incs='#include <errno.h>
                      #include <string.h>
                      #include <stdio.h>'
    atm_feature_path=
    atm_feature_libs=
    atm_feature_test='int  n;
                      char *p;
                      for (n = 1; n < 1000; n++) {
                          errno = 0;
                          p = strerror(n);
                          if (errno == EINVAL
                              || p == NULL
                              || strncmp(p, "Unknown error", 13) == 0)
                          {
                              break;
                          }
                      }
                      printf("%d", n);'
    . auto/feature
fi

#--------------------------------------------

atm_feature="localtime_r()"
atm_feature_name="ATM_HAVE_LOCALTIME_R"
atm_feature_run=no
atm_feature_incs="#include <time.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct tm t; time_t c=0; localtime_r(&c, &t)"
. auto/feature

#--------------------------------------------

atm_feature="posix_memalign()"
atm_feature_name="ATM_HAVE_POSIX_MEMALIGN"
atm_feature_run=no
atm_feature_incs="#include <stdlib.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="void *p; int n; n = posix_memalign(&p, 4096, 4096);
                  if (n != 0) return 1"
. auto/feature

#--------------------------------------------

atm_feature="memalign()"
atm_feature_name="ATM_HAVE_MEMALIGN"
atm_feature_run=no
atm_feature_incs="#include <stdlib.h>
                  #include <malloc.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="void *p; p = memalign(4096, 4096);
                  if (p == NULL) return 1"
. auto/feature

#--------------------------------------------

atm_feature="mmap(MAP_ANON|MAP_SHARED)"
atm_feature_name="ATM_HAVE_MAP_ANON"
atm_feature_run=yes
atm_feature_incs="#include <sys/mman.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="void *p;
                  p = mmap(NULL, 4096, PROT_READ|PROT_WRITE,
                           MAP_ANON|MAP_SHARED, -1, 0);
                  if (p == MAP_FAILED) return 1;"
. auto/feature

#--------------------------------------------

atm_feature='mmap("/dev/zero", MAP_SHARED)'
atm_feature_name="ATM_HAVE_MAP_DEVZERO"
atm_feature_run=yes
atm_feature_incs="#include <sys/mman.h>
                  #include <sys/stat.h>
                  #include <fcntl.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test='void *p; int  fd;
                  fd = open("/dev/zero", O_RDWR);
                  p = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
                  if (p == MAP_FAILED) return 1;'
. auto/feature

#--------------------------------------------

atm_feature="System V shared memory"
atm_feature_name="ATM_HAVE_SYSVSHM"
atm_feature_run=yes
atm_feature_incs="#include <sys/ipc.h>
                  #include <sys/shm.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int  id;
                  id = shmget(IPC_PRIVATE, 4096, (SHM_R|SHM_W|IPC_CREAT));
                  if (id == -1) return 1;
                  shmctl(id, IPC_RMID, NULL);"
. auto/feature

#--------------------------------------------

atm_feature="POSIX semaphores"
atm_feature_name="ATM_HAVE_POSIX_SEM"
atm_feature_run=yes
atm_feature_incs="#include <semaphore.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="sem_t  sem;
                  if (sem_init(&sem, 1, 0) == -1) return 1;
                  sem_destroy(&sem);"
. auto/feature


if [ $atm_found = no ]; then

    # Linux has POSIX semaphores in libpthread
    atm_feature="POSIX semaphores in libpthread"
    atm_feature_libs=-lpthread
    . auto/feature

    if [ $atm_found = yes ]; then
        CORE_LIBS="$CORE_LIBS -lpthread"
    fi
fi


if [ $atm_found = no ]; then

    # Solaris has POSIX semaphores in librt
    atm_feature="POSIX semaphores in librt"
    atm_feature_libs=-lrt
    . auto/feature

    if [ $atm_found = yes ]; then
        CORE_LIBS="$CORE_LIBS -lrt"
    fi
fi

#--------------------------------------------

atm_feature="struct msghdr.msg_control"
atm_feature_name="ATM_HAVE_MSGHDR_MSG_CONTROL"
atm_feature_run=no
atm_feature_incs="#include <sys/socket.h>
                  #include <stdio.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct msghdr  msg;
                  printf(\"%d\", (int) sizeof(msg.msg_control))"
. auto/feature

#--------------------------------------------

atm_feature="ioctl(FIONBIO)"
atm_feature_name="ATM_HAVE_FIONBIO"
atm_feature_run=no
atm_feature_incs="#include <sys/ioctl.h>
                  #include <stdio.h>
                  $ATM_INCLUDE_SYS_FILIO_H"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int i = FIONBIO; printf(\"%d\", i)"
. auto/feature

#--------------------------------------------

atm_feature="struct tm.tm_gmtoff"
atm_feature_name="ATM_HAVE_GMTOFF"
atm_feature_run=no
atm_feature_incs="#include <time.h>
                  #include <stdio.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct tm  tm; tm.tm_gmtoff = 0;
                  printf(\"%d\", (int) tm.tm_gmtoff)"
. auto/feature

#--------------------------------------------

atm_feature="struct dirent.d_namlen"
atm_feature_name="ATM_HAVE_D_NAMLEN"
atm_feature_run=no
atm_feature_incs="#include <dirent.h>
                  #include <stdio.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct dirent  dir; dir.d_namlen = 0;
                  printf(\"%d\", (int) dir.d_namlen)"
. auto/feature

#--------------------------------------------

atm_feature="struct dirent.d_type"
atm_feature_name="ATM_HAVE_D_TYPE"
atm_feature_run=no
atm_feature_incs="#include <dirent.h>
                  #include <stdio.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct dirent  dir; dir.d_type = DT_REG;
                  printf(\"%d\", (int) dir.d_type)"
. auto/feature

#--------------------------------------------

atm_feature="sysconf(_SC_NPROCESSORS_ONLN)"
atm_feature_name="ATM_HAVE_SC_NPROCESSORS_ONLN"
atm_feature_run=no
atm_feature_incs=
atm_feature_path=
atm_feature_libs=
atm_feature_test="sysconf(_SC_NPROCESSORS_ONLN)"
. auto/feature

#--------------------------------------------

atm_feature="openat(), fstatat()"
atm_feature_name="ATM_HAVE_OPENAT"
atm_feature_run=no
atm_feature_incs="#include <sys/types.h>
                  #include <sys/stat.h>
                  #include <fcntl.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="struct stat sb;
                  openat(AT_FDCWD, \".\", O_RDONLY|O_NOFOLLOW);
                  fstatat(AT_FDCWD, \".\", &sb, AT_SYMLINK_NOFOLLOW);"
. auto/feature

#--------------------------------------------

atm_feature="getaddrinfo()"
atm_feature_name="ATM_HAVE_GETADDRINFO"
atm_feature_run=no
atm_feature_incs="#include <sys/types.h>
                  #include <sys/socket.h>
                  #include <netdb.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test='struct addrinfo *res;
                  if (getaddrinfo("localhost", NULL, NULL, &res) != 0) return 1;
                  freeaddrinfo(res)'
. auto/feature

#--------------------------------------------

#unix thread feature config
#TODO. need checking?
if [ $USE_THREADS = YES ]; then
    have=ATM_THREADS . auto/have
    CORE_DEPS="$CORE_DEPS $THREAD_POOL_DEPS"
    CORE_SRCS="$CORE_SRCS $THREAD_POOL_SRCS"
    CORE_LIBS="$CORE_LIBS -lpthread"
fi

#--------------------------------------------

