#!/bin/sh
have=ATM_DARWIN . auto/have_headers

atm_spacer='
'

MAIN_LINK=
MODULE_LINK="-shared -Wl,-undefined,dynamic_lookup"

# kqueue

echo " + kqueue found"
have=ATM_HAVE_KQUEUE . auto/have
have=ATM_HAVE_CLEAR_EVENT . auto/have
EVENT_MODULES="$EVENT_MODULES $KQUEUE_MODULE"
CORE_SRCS="$CORE_SRCS $KQUEUE_SRCS"
EVENT_FOUND=YES
ATM_KQUEUE_CHECKED=YES

atm_feature="kqueue's EVFILT_TIMER"
atm_feature_name="ATM_HAVE_TIMER_EVENT"
atm_feature_run=yes
atm_feature_incs="#include <sys/event.h>
                  #include <sys/time.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int      kq;
                  struct kevent    kev;
                  struct timespec  ts;

                  if ((kq = kqueue()) == -1) return 1;

                  kev.ident = 0;
                  kev.filter = EVFILT_TIMER;
                  kev.flags = EV_ADD|EV_ENABLE;
                  kev.fflags = 0;
                  kev.data = 1000;
                  kev.udata = 0;

                  ts.tv_sec = 0;
                  ts.tv_nsec = 0;

                  if (kevent(kq, &kev, 1, &kev, 1, &ts) == -1) return 1;

                  if (kev.flags & EV_ERROR) return 1;"

. auto/feature


atm_feature="Darwin 64-bit kqueue millisecond timeout bug"
atm_feature_name=ATM_DARWIN_KEVENT_BUG
atm_feature_run=bug
atm_feature_incs="#include <sys/event.h>
                  #include <sys/time.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int  kq;
                  struct kevent    kev;
                  struct timespec  ts;
                  struct timeval   tv, tv0;

                  kq = kqueue();

                  ts.tv_sec = 0;
                  ts.tv_nsec = 999000000;

                  gettimeofday(&tv, 0);
                  kevent(kq, NULL, 0, &kev, 1, &ts);
                  gettimeofday(&tv0, 0);
                  timersub(&tv0, &tv, &tv);

                  if (tv.tv_sec * 1000000 + tv.tv_usec < 900000) return 1;"

. auto/feature


# sendfile()

CC_AUX_FLAGS="$CC_AUX_FLAGS"
atm_feature="sendfile()"
atm_feature_name="ATM_HAVE_SENDFILE"
atm_feature_run=yes
atm_feature_incs="#include <sys/types.h>
                  #include <sys/socket.h>
                  #include <sys/uio.h>
                  #include <sys/errno.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int s = 0, fd = 1;
                  off_t n; off_t off = 0;
                  n = sendfile(s, fd, off, &n, NULL, 0);
                  if (n == -1 && errno == ENOSYS) return 1"
. auto/feature

if [ $atm_found = yes ]; then
    CORE_SRCS="$CORE_SRCS $DARWIN_SENDFILE_SRCS"
fi


atm_feature="atomic(3)"
atm_feature_name=ATM_DARWIN_ATOMIC
atm_feature_run=no
atm_feature_incs="#include <libkern/OSAtomic.h>"
atm_feature_path=
atm_feature_libs=
atm_feature_test="int32_t  lock = 0;
                  if (!OSAtomicCompareAndSwap32Barrier(0, 1, &lock)) return 1"
. auto/feature


# ------------------------------------------------------
# SOURCE CONFIGURE
CORE_INCS="$CORE_INCS $OS_DARWIN_INCS"
CORE_DEPS="$CORE_DEPS $OS_DARWIN_DEPS"
CORE_SRCS="$CORE_SRCS $OS_DARWIN_SRCS"
CORE_LIBS="$CORE_LIBS $OS_DARWIN_LIBS"
